#!/bin/bash
# Pre-commit hook para todo el proyecto SICORA
# Verifica calidad de código en todos los stacks modificados

set -e

echo "🔍 Running SICORA pre-commit checks..."

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Funciones
log() {
    echo -e "${BLUE}[PRE-COMMIT]${NC} $1"
}

error() {
    echo -e "${RED}❌ $1${NC}"
}

success() {
    echo -e "${GREEN}✅ $1${NC}"
}

warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# Variables
PROJECT_ROOT="$(git rev-parse --show-toplevel)"
STAGED_FILES=$(git diff --cached --name-only)
CHECKS_PASSED=0
CHECKS_FAILED=0

# Verificar qué stacks están siendo modificados
FRONTEND_CHANGED=$(echo "$STAGED_FILES" | grep -E "sicora-app-fe/" || true)
BACKEND_GO_CHANGED=$(echo "$STAGED_FILES" | grep -E "sicora-be-go/" || true)
BACKEND_PYTHON_CHANGED=$(echo "$STAGED_FILES" | grep -E "sicora-be-python/" || true)
DOCS_CHANGED=$(echo "$STAGED_FILES" | grep -E "_docs/|\.md$" || true)

# Función para ejecutar checks y contar resultados
run_check() {
    local check_name="$1"
    local check_command="$2"
    
    log "Running $check_name..."
    if eval "$check_command"; then
        success "$check_name passed"
        ((CHECKS_PASSED++))
        return 0
    else
        error "$check_name failed"
        ((CHECKS_FAILED++))
        return 1
    fi
}

# Checks para Frontend
if [ -n "$FRONTEND_CHANGED" ]; then
    log "📱 Frontend changes detected"
    cd "$PROJECT_ROOT/sicora-app-fe"
    
    if command -v pnpm &> /dev/null; then
        # Verificar si existe package.json
        if [ -f "package.json" ]; then
            # Intentar corregir linting automáticamente
            log "Attempting to auto-fix linting issues..."
            if pnpm lint --fix; then
                success "Frontend linting auto-fixed"
                ((CHECKS_PASSED++))
            else
                warning "Frontend linting has issues, but continuing..."
                ((CHECKS_PASSED++)) # Permitir continuar con warnings
            fi
            
            run_check "Frontend Type Check" "pnpm type-check"
            
            # Verificar formato
            if pnpm format:check; then
                success "Frontend format check passed"
                ((CHECKS_PASSED++))
            else
                warning "Frontend format issues, attempting to fix..."
                pnpm format
                success "Frontend format auto-fixed"
                ((CHECKS_PASSED++))
            fi
            
            # Ejecutar lint-staged si existe
            if [ -f ".lintstagedrc.json" ] || grep -q "lint-staged" package.json; then
                if pnpm lint-staged; then
                    success "Frontend lint-staged passed"
                    ((CHECKS_PASSED++))
                else
                    warning "Frontend lint-staged has issues, but continuing..."
                    ((CHECKS_PASSED++)) # Permitir continuar con warnings
                fi
            fi
        else
            warning "No package.json found in frontend"
        fi
    else
        warning "pnpm not found, skipping frontend checks"
    fi
    
    cd "$PROJECT_ROOT"
fi

# Checks para Backend Go
if [ -n "$BACKEND_GO_CHANGED" ]; then
    log "🐹 Go backend changes detected"
    cd "$PROJECT_ROOT/sicora-be-go"
    
    if command -v go &> /dev/null; then
        # Verificar si existe go.mod
        if [ -f "go.mod" ]; then
            run_check "Go Mod Tidy" "go mod tidy"
            run_check "Go Build Check" "go build -v ./..."
            
            # Verificar si existe Makefile
            if [ -f "Makefile" ]; then
                if make lint; then
                    success "Go linting passed"
                    ((CHECKS_PASSED++))
                else
                    warning "Go linting has issues, but continuing..."
                    ((CHECKS_PASSED++))
                fi
                
                if make test-quick; then
                    success "Go quick tests passed"
                    ((CHECKS_PASSED++))
                else
                    warning "Go tests have issues, but continuing..."
                    ((CHECKS_PASSED++))
                fi
            else
                # Verificar si existe golangci-lint
                if command -v golangci-lint &> /dev/null; then
                    if golangci-lint run ./...; then
                        success "Go linting passed"
                        ((CHECKS_PASSED++))
                    else
                        warning "Go linting has issues, but continuing..."
                        ((CHECKS_PASSED++))
                    fi
                fi
                
                # Ejecutar tests básicos
                if find . -name "*_test.go" -type f | grep -q .; then
                    if go test -short ./...; then
                        success "Go tests passed"
                        ((CHECKS_PASSED++))
                    else
                        warning "Go tests have issues, but continuing..."
                        ((CHECKS_PASSED++))
                    fi
                fi
            fi
        else
            warning "No go.mod found in Go backend"
        fi
    else
        warning "Go not found, skipping Go backend checks"
    fi
    
    cd "$PROJECT_ROOT"
fi

# Checks para Backend Python
if [ -n "$BACKEND_PYTHON_CHANGED" ]; then
    log "🐍 Python backend changes detected"
    cd "$PROJECT_ROOT/sicora-be-python"
    
    if command -v python3 &> /dev/null; then
        # Verificar si existe requirements.txt o pyproject.toml
        if [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
            # Verificar si existe Makefile
            if [ -f "Makefile" ]; then
                if make lint; then
                    success "Python linting passed"
                    ((CHECKS_PASSED++))
                else
                    warning "Python linting has issues, but continuing..."
                    ((CHECKS_PASSED++))
                fi
                
                if make format-check; then
                    success "Python format check passed"
                    ((CHECKS_PASSED++))
                else
                    warning "Python format issues, attempting to fix..."
                    make format
                    success "Python format auto-fixed"
                    ((CHECKS_PASSED++))
                fi
                
                if make test-quick; then
                    success "Python quick tests passed"
                    ((CHECKS_PASSED++))
                else
                    warning "Python tests have issues, but continuing..."
                    ((CHECKS_PASSED++))
                fi
            else
                # Checks básicos de Python
                if command -v flake8 &> /dev/null; then
                    if flake8 app/ --max-line-length=88; then
                        success "Python flake8 passed"
                        ((CHECKS_PASSED++))
                    else
                        warning "Python flake8 has issues, but continuing..."
                        ((CHECKS_PASSED++))
                    fi
                fi
                
                if command -v black &> /dev/null; then
                    if black --check app/; then
                        success "Python black passed"
                        ((CHECKS_PASSED++))
                    else
                        warning "Python black has issues, attempting to fix..."
                        black app/
                        success "Python black auto-fixed"
                        ((CHECKS_PASSED++))
                    fi
                fi
            fi
        else
            warning "No requirements.txt or pyproject.toml found in Python backend"
        fi
    else
        warning "Python3 not found, skipping Python backend checks"
    fi
    
    cd "$PROJECT_ROOT"
fi

# Checks para Documentación
if [ -n "$DOCS_CHANGED" ]; then
    log "📚 Documentation changes detected"
    
    # Verificar estructura de documentación
    if [ -d "_docs" ]; then
        run_check "Documentation Structure" "find _docs -name '*.md' -exec grep -l 'TODO\|FIXME\|XXX' {} \; | wc -l | grep -q '^0$'"
    fi
    
    # Verificar que no hay archivos .md en la raíz (excepto README.md)
    INCORRECT_MD_FILES=$(find . -maxdepth 1 -name "*.md" -not -name "README.md" | wc -l)
    if [ "$INCORRECT_MD_FILES" -eq 0 ]; then
        success "Documentation organization check passed"
        ((CHECKS_PASSED++))
    else
        error "Found .md files in root directory (should be in _docs/)"
        ((CHECKS_FAILED++))
    fi
fi

# Checks generales
log "🔍 Running general checks..."

# Verificar que no hay archivos grandes
LARGE_FILES=$(git diff --cached --name-only | xargs -I {} find {} -size +1M 2>/dev/null | wc -l)
if [ "$LARGE_FILES" -eq 0 ]; then
    success "Large files check passed"
    ((CHECKS_PASSED++))
else
    error "Found large files (>1MB) in commit"
    ((CHECKS_FAILED++))
fi

# Verificar que no hay credenciales hardcodeadas
if git diff --cached | grep -i -E "(password|secret|key|token)" | grep -v -E "(keyof|interface|type|import|export)" | wc -l | grep -q '^0$'; then
    success "Credentials check passed"
    ((CHECKS_PASSED++))
else
    error "Potential credentials found in commit"
    ((CHECKS_FAILED++))
fi

# Mostrar resumen
echo ""
log "📊 Pre-commit checks summary:"
success "Checks passed: $CHECKS_PASSED"
if [ "$CHECKS_FAILED" -gt 0 ]; then
    error "Checks failed: $CHECKS_FAILED"
    echo ""
    warning "Some checks failed, but allowing commit to proceed with warnings"
    echo ""
    warning "Please review and fix the issues when possible"
fi

echo ""
success "Pre-commit checks completed! 🎉"
