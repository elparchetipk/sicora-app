version: '3.9'

services:
  # PostgreSQL 15 - Base de datos principal
  postgres:
    image: postgres:15-alpine
    container_name: sicora-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sicora_dev}
      POSTGRES_USER: ${POSTGRES_USER:-sicora_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sicora_password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - sicora-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sicora_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis - Cache y sesiones
  redis:
    image: redis:7-alpine
    container_name: sicora-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - sicora-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx - Reverse proxy y load balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: sicora-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ../../nginx/configs:/etc/nginx/conf.d
      - ../../nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - sicora-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus - Monitoreo
  prometheus:
    image: prom/prometheus:latest
    container_name: sicora-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ../../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - sicora-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana - Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: sicora-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ../../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ../../monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - sicora-network
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  sicora-network:
    driver: bridge
    name: sicora-network
