# Makefile para ProjectEval Service
.PHONY: help setup dev test lint format clean build deploy db-up db-migrate db-downgrade db-reset monitor validate

# Variables
PYTHON = python3
PIP = pip
UVICORN = uvicorn
DOCKER_COMPOSE = docker compose
SERVICE_NAME = projectevalservice
PORT = 8007

help: ## Mostrar ayuda
	@echo "üìã Comandos disponibles para ProjectEval Service:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'
	@echo ""

setup: ## Configurar entorno y ejecutar migraciones
	@echo "üöÄ Configurando ProjectEval Service..."
	@chmod +x setup.sh dev.sh monitor.sh validate.sh
	@./setup.sh

dev: ## Iniciar servicio en modo desarrollo
	@echo "üöÄ Iniciando en modo desarrollo..."
	@chmod +x dev.sh
	@./dev.sh

test: ## Ejecutar tests
	@echo "üß™ Ejecutando tests..."
	@if [ -d "venv" ]; then source venv/bin/activate; fi
	@$(PYTHON) -m pytest tests/ -v --cov=app --cov-report=term-missing

lint: ## Verificar c√≥digo con pycodestyle
	@echo "üîç Verificando c√≥digo..."
	@if [ -d "venv" ]; then source venv/bin/activate; fi
	@pycodestyle app/ --max-line-length=88 --ignore=E203,W503
	@echo "‚úÖ C√≥digo verificado"

format: ## Formatear c√≥digo con black
	@echo "üé® Formateando c√≥digo..."
	@if [ -d "venv" ]; then source venv/bin/activate; fi
	@black app/ --line-length=88
	@echo "‚úÖ C√≥digo formateado"

clean: ## Limpiar archivos temporales
	@echo "üßπ Limpiando archivos temporales..."
	@find . -type f -name "*.pyc" -delete
	@find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	@find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
	@find . -type f -name "*.log" -delete
	@echo "‚úÖ Limpieza completada"

# Comandos de Docker
build: ## Construir imagen Docker
	@echo "üê≥ Construyendo imagen Docker..."
	@docker build -t sicora/$(SERVICE_NAME):latest .
	@echo "‚úÖ Imagen construida"

deploy: build ## Desplegar servicio con Docker
	@echo "üöÄ Desplegando servicio..."
	@$(DOCKER_COMPOSE) up -d $(SERVICE_NAME)
	@echo "‚úÖ Servicio desplegado en puerto $(PORT)"

# Comandos de Base de Datos
db-up: ## Iniciar PostgreSQL
	@echo "üêò Iniciando PostgreSQL..."
	@cd ../.. && $(DOCKER_COMPOSE) up -d postgres
	@echo "‚è±Ô∏è Esperando a que PostgreSQL est√© listo..."
	@sleep 5
	@echo "‚úÖ PostgreSQL iniciado"

db-migrate: ## Ejecutar migraciones de base de datos
	@echo "üóÑÔ∏è Ejecutando migraciones..."
	@if [ -d "venv" ]; then source venv/bin/activate; fi
	@alembic upgrade head
	@echo "‚úÖ Migraciones ejecutadas"

db-downgrade: ## Hacer rollback de migraci√≥n
	@echo "‚¨áÔ∏è Haciendo rollback de migraci√≥n..."
	@if [ -d "venv" ]; then source venv/bin/activate; fi
	@alembic downgrade -1
	@echo "‚úÖ Rollback completado"

db-reset: ## Reiniciar base de datos completa (CUIDADO)
	@echo "‚ö†Ô∏è CUIDADO: Esto eliminar√° todos los datos"
	@read -p "¬øEst√°s seguro? (yes/no): " confirm && [ "$$confirm" = "yes" ]
	@echo "üóÑÔ∏è Reiniciando base de datos..."
	@docker exec sicora_postgres psql -U postgres -d sicora_dev -c "DROP SCHEMA IF EXISTS projectevalservice_schema CASCADE;"
	@docker exec sicora_postgres psql -U postgres -d sicora_dev -c "CREATE SCHEMA projectevalservice_schema;"
	@docker exec sicora_postgres psql -U postgres -d sicora_dev -c "GRANT ALL PRIVILEGES ON SCHEMA projectevalservice_schema TO sicora_migrator;"
	@$(MAKE) db-migrate
	@echo "‚úÖ Base de datos reiniciada"

# Comandos de Monitoreo
monitor: ## Ejecutar monitoreo de rendimiento
	@echo "üìä Ejecutando monitoreo..."
	@chmod +x monitor.sh
	@./monitor.sh

validate: ## Validar conectividad con otros stacks
	@echo "üîó Validando conectividad..."
	@chmod +x validate.sh
	@./validate.sh

# Comandos de instalaci√≥n
install: ## Instalar dependencias
	@echo "üì¶ Instalando dependencias..."
	@$(PYTHON) -m venv venv
	@source venv/bin/activate && $(PIP) install -r requirements.txt
	@echo "‚úÖ Dependencias instaladas"

install-dev: install ## Instalar dependencias de desarrollo
	@echo "üì¶ Instalando dependencias de desarrollo..."
	@source venv/bin/activate && $(PIP) install pytest pytest-cov black pycodestyle
	@echo "‚úÖ Dependencias de desarrollo instaladas"

# Comando de informaci√≥n
info: ## Mostrar informaci√≥n del servicio
	@echo "üìã Informaci√≥n del Servicio:"
	@echo "  Nombre: ProjectEval Service"
	@echo "  Puerto: $(PORT)"
	@echo "  Esquema DB: projectevalservice_schema"
	@echo "  URL Docs: http://localhost:$(PORT)/docs"
	@echo "  URL Health: http://localhost:$(PORT)/api/v1/health"

# Estado del servicio
status: ## Mostrar estado del servicio y dependencias
	@echo "üìä Estado del servicio:"
	@echo ""
	@echo "üêò PostgreSQL:"
	@docker exec sicora_postgres pg_isready -U postgres 2>/dev/null && echo "  ‚úÖ Disponible" || echo "  ‚ùå No disponible"
	@echo ""
	@echo "üóÑÔ∏è Esquema de base de datos:"
	@docker exec sicora_postgres psql -U postgres -d sicora_dev -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'projectevalservice_schema';" 2>/dev/null | sed 's/^/  üìã Tablas: /' || echo "  ‚ùå No accesible"
	@echo ""
	@echo "üì° Servicio HTTP:"
	@curl -s --connect-timeout 2 http://localhost:$(PORT)/docs > /dev/null 2>&1 && echo "  ‚úÖ Disponible en http://localhost:$(PORT)" || echo "  ‚ùå No disponible"
