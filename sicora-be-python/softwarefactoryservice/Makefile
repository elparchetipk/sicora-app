# Makefile para SoftwareFactoryService Migrations
# Manejo de migraciones de base de datos usando Alembic

.PHONY: help install clean migrate migrate-auto migrate-history migrate-current migrate-down migrate-reset test-connection

# Variables
VENV_DIR = venv
PYTHON = $(VENV_DIR)/bin/python
PIP = $(VENV_DIR)/bin/pip
ALEMBIC = $(VENV_DIR)/bin/alembic

# Help
help: ## Mostrar ayuda
	@echo "SoftwareFactoryService Migrations - Comandos disponibles:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "Ejemplos de uso:"
	@echo "  make install          # Instalar dependencias"
	@echo "  make migrate          # Ejecutar migraciones"
	@echo "  make migrate-auto     # Crear migraci√≥n autom√°tica"
	@echo "  make migrate-history  # Ver historial de migraciones"

# Instalaci√≥n
install: ## Instalar dependencias en entorno virtual
	@echo "üîß Instalando dependencias para SoftwareFactoryService migrations..."
	python3 -m venv $(VENV_DIR)
	$(PIP) install --upgrade pip
	$(PIP) install -r requirements.txt
	@echo "‚úÖ Dependencias instaladas"

# Limpieza
clean: ## Limpiar entorno virtual
	@echo "üßπ Limpiando entorno virtual..."
	rm -rf $(VENV_DIR)
	@echo "‚úÖ Entorno virtual eliminado"

# Verificar conexi√≥n
test-connection: ## Verificar conexi√≥n a la base de datos
	@echo "üîå Verificando conexi√≥n a la base de datos..."
	$(PYTHON) -c "import psycopg2; import os; \
		conn = psycopg2.connect(os.getenv('DATABASE_URL', 'postgresql://softwarefactoryservice_user:softwarefactoryservice_password_placeholder@localhost:5432/sicora_db')); \
		print('‚úÖ Conexi√≥n exitosa'); conn.close()"

# Migraciones
migrate: ## Ejecutar todas las migraciones pendientes
	@echo "üì¶ Ejecutando migraciones para SoftwareFactoryService..."
	$(ALEMBIC) upgrade head
	@echo "‚úÖ Migraciones completadas"

migrate-auto: ## Crear migraci√≥n autom√°tica (requiere MESSAGE)
	@if [ -z "$(MESSAGE)" ]; then \
		echo "‚ùå Error: Especifica un mensaje para la migraci√≥n"; \
		echo "   Uso: make migrate-auto MESSAGE='descripci√≥n de la migraci√≥n'"; \
		exit 1; \
	fi
	@echo "üìù Creando migraci√≥n autom√°tica: $(MESSAGE)"
	$(ALEMBIC) revision --autogenerate -m "$(MESSAGE)"
	@echo "‚úÖ Migraci√≥n creada"

migrate-manual: ## Crear migraci√≥n manual (requiere MESSAGE)
	@if [ -z "$(MESSAGE)" ]; then \
		echo "‚ùå Error: Especifica un mensaje para la migraci√≥n"; \
		echo "   Uso: make migrate-manual MESSAGE='descripci√≥n de la migraci√≥n'"; \
		exit 1; \
	fi
	@echo "üìù Creando migraci√≥n manual: $(MESSAGE)"
	$(ALEMBIC) revision -m "$(MESSAGE)"
	@echo "‚úÖ Migraci√≥n creada"

migrate-history: ## Ver historial de migraciones
	@echo "üìã Historial de migraciones:"
	$(ALEMBIC) history --verbose

migrate-current: ## Ver migraci√≥n actual
	@echo "üìç Migraci√≥n actual:"
	$(ALEMBIC) current --verbose

migrate-down: ## Revertir √∫ltima migraci√≥n
	@echo "‚¨áÔ∏è Revirtiendo √∫ltima migraci√≥n..."
	$(ALEMBIC) downgrade -1
	@echo "‚úÖ Migraci√≥n revertida"

migrate-reset: ## Resetear todas las migraciones (¬°PELIGROSO!)
	@echo "‚ö†Ô∏è ADVERTENCIA: Esto eliminar√° todas las tablas del esquema softwarefactoryservice_schema"
	@echo "¬øEst√°s seguro? [y/N] " && read ans && [ $${ans:-N} = y ]
	@echo "üîÑ Reseteando migraciones..."
	$(ALEMBIC) downgrade base
	$(ALEMBIC) upgrade head
	@echo "‚úÖ Migraciones reseteadas"

# Validaci√≥n
validate-schema: ## Validar que el esquema coincida con las entidades Go
	@echo "üîç Validando esquema de base de datos..."
	@echo "‚ÑπÔ∏è Verificar manualmente que las tablas coincidan con las entidades Go en:"
	@echo "   sicora-be-go/softwarefactoryservice/internal/domain/entities/"
	$(ALEMBIC) current --verbose

# Informaci√≥n
info: ## Mostrar informaci√≥n del entorno
	@echo "üìä Informaci√≥n de SoftwareFactoryService Migrations:"
	@echo "   Esquema: softwarefactoryservice_schema"
	@echo "   Base de datos: sicora_db"
	@echo "   Usuario: softwarefactoryservice_user"
	@echo "   Tabla de versiones: alembic_version_softwarefactoryservice"
	@echo ""
	@echo "üîó Integraci√≥n:"
	@echo "   Microservicio Go: sicora-be-go/softwarefactoryservice"
	@echo "   Inicializaci√≥n DB: sicora-be-python/database/init/01_init_db_users_schemas.sql"

# Desarrollo
dev-setup: install test-connection ## Configuraci√≥n completa para desarrollo
	@echo "üöÄ Configurando entorno de desarrollo..."
	@echo "‚úÖ Entorno listo para desarrollo"

# Producci√≥n
prod-migrate: ## Ejecutar migraciones en producci√≥n (con validaciones)
	@echo "üè≠ Ejecutando migraciones en modo producci√≥n..."
	@echo "‚ö†Ô∏è Validando entorno de producci√≥n..."
	@if [ -z "$(DATABASE_URL)" ]; then \
		echo "‚ùå Error: DATABASE_URL no est√° configurada"; \
		exit 1; \
	fi
	$(ALEMBIC) upgrade head
	@echo "‚úÖ Migraciones de producci√≥n completadas"

# Performance y Analytics
refresh-analytics: ## Refrescar vistas materializadas para analytics
	@echo "üìä Refrescando vistas de analytics..."
	$(PYTHON) -c "import psycopg2; import os; \
	conn = psycopg2.connect(os.getenv('DATABASE_URL', 'postgresql://softwarefactoryservice_user:softwarefactoryservice_password_placeholder@localhost:5432/sicora_db')); \
	cur = conn.cursor(); \
	cur.execute('SET search_path = softwarefactoryservice_schema, public'); \
	cur.execute('SELECT refresh_softwarefactory_analytics()'); \
	conn.commit(); conn.close(); print('‚úÖ Analytics refrescadas')"

analyze-performance: ## Analizar rendimiento de base de datos e √≠ndices
	@echo "üîç Analizando rendimiento de base de datos..."
	$(PYTHON) -c "import psycopg2; import os; \
	conn = psycopg2.connect(os.getenv('DATABASE_URL', 'postgresql://softwarefactoryservice_user:softwarefactoryservice_password_placeholder@localhost:5432/sicora_db')); \
	cur = conn.cursor(); \
	cur.execute(\"\"\"SELECT schemaname, tablename, indexname, idx_scan, idx_tup_read, idx_tup_fetch \
	FROM pg_stat_user_indexes \
	WHERE schemaname = 'softwarefactoryservice_schema' \
	ORDER BY idx_scan DESC LIMIT 20\"\"\"); \
	print('üìà Top 20 √≠ndices m√°s utilizados:'); \
	for row in cur.fetchall(): print(f'  {row[2]}: {row[3]} scans'); \
	conn.close()"

check-indexes: ## Verificar estad√≠sticas de uso de √≠ndices
	@echo "üìà Verificando uso de √≠ndices..."
	$(PYTHON) -c "import psycopg2; import os; \
	conn = psycopg2.connect(os.getenv('DATABASE_URL', 'postgresql://softwarefactoryservice_user:softwarefactoryservice_password_placeholder@localhost:5432/sicora_db')); \
	cur = conn.cursor(); \
	cur.execute(\"\"\"SELECT schemaname, tablename, indexname, idx_scan \
	FROM pg_stat_user_indexes \
	WHERE schemaname = 'softwarefactoryservice_schema' AND idx_scan = 0\"\"\"); \
	unused = cur.fetchall(); \
	if unused: \
		print('‚ö†Ô∏è √çndices sin uso encontrados:'); \
		[print(f'  {row[2]}') for row in unused]; \
	else: \
		print('‚úÖ Todos los √≠ndices est√°n siendo utilizados'); \
	conn.close()"

analyze-queries: ## Analizar consultas lentas y estad√≠sticas
	@echo "üêå Analizando consultas lentas..."
	$(PYTHON) -c "import psycopg2; import os; \
	conn = psycopg2.connect(os.getenv('DATABASE_URL', 'postgresql://softwarefactoryservice_user:softwarefactoryservice_password_placeholder@localhost:5432/sicora_db')); \
	cur = conn.cursor(); \
	cur.execute(\"\"\"SELECT query, calls, total_time, mean_time, rows \
	FROM pg_stat_statements \
	WHERE query LIKE '%factory_%' \
	ORDER BY mean_time DESC LIMIT 10\"\"\"); \
	print('üîç Top 10 consultas m√°s lentas:'); \
	for row in cur.fetchall(): \
		print(f'  Tiempo promedio: {row[3]:.2f}ms - Llamadas: {row[1]}'); \
		print(f'    Query: {row[0][:100]}...'); \
	conn.close()" || echo "‚ÑπÔ∏è pg_stat_statements no disponible"

# Schema y Permisos
setup-schema: ## Configurar esquema y permisos de base de datos
	@echo "üîß Configurando esquema SoftwareFactoryService..."
	$(PYTHON) -c "import psycopg2; import os; \
	admin_url = os.getenv('ADMIN_DATABASE_URL', 'postgresql://postgres:postgres@localhost:5432/sicora_db'); \
	conn = psycopg2.connect(admin_url); \
	conn.autocommit = True; \
	cur = conn.cursor(); \
	try: \
		cur.execute('CREATE SCHEMA IF NOT EXISTS softwarefactoryservice_schema'); \
		print('‚úÖ Schema creado/verificado'); \
		cur.execute('CREATE USER softwarefactoryservice_user WITH PASSWORD \\'softwarefactoryservice_password_placeholder\\''); \
		print('‚úÖ Usuario creado'); \
	except psycopg2.errors.DuplicateObject: \
		print('‚ÑπÔ∏è Usuario ya existe'); \
	cur.execute('ALTER SCHEMA softwarefactoryservice_schema OWNER TO softwarefactoryservice_user'); \
	cur.execute('GRANT ALL ON SCHEMA softwarefactoryservice_schema TO softwarefactoryservice_user'); \
	cur.execute('GRANT USAGE ON SCHEMA public TO softwarefactoryservice_user'); \
	cur.execute('ALTER ROLE softwarefactoryservice_user SET search_path = softwarefactoryservice_schema, public'); \
	conn.close(); print('‚úÖ Configuraci√≥n de esquema completada')"

verify-permissions: ## Verificar permisos del usuario de base de datos
	@echo "üîê Verificando permisos..."
	$(PYTHON) -c "import psycopg2; import os; \
	conn = psycopg2.connect(os.getenv('DATABASE_URL', 'postgresql://softwarefactoryservice_user:softwarefactoryservice_password_placeholder@localhost:5432/sicora_db')); \
	cur = conn.cursor(); \
	cur.execute('SELECT current_schema(), current_user, session_user'); \
	schema, current, session = cur.fetchone(); \
	print(f'‚úÖ Schema actual: {schema}'); \
	print(f'‚úÖ Usuario actual: {current}'); \
	print(f'‚úÖ Usuario de sesi√≥n: {session}'); \
	cur.execute('SHOW search_path'); \
	search_path = cur.fetchone()[0]; \
	print(f'‚úÖ Search path: {search_path}'); \
	conn.close()"

# Monitoreo y Mantenimiento
analyze-indexes: ## Analizar uso y rendimiento de √≠ndices
	@echo "üìä Analizando rendimiento de √≠ndices..."
	$(PYTHON) -c "import psycopg2; import os; \
	conn = psycopg2.connect(os.getenv('DATABASE_URL', 'postgresql://softwarefactoryservice_user:softwarefactoryservice_password_placeholder@localhost:5432/sicora_db')); \
	cur = conn.cursor(); \
	print('=== √çNDICES M√ÅS UTILIZADOS ==='); \
	cur.execute('SELECT schemaname, tablename, indexname, idx_tup_read, idx_tup_fetch FROM pg_stat_user_indexes WHERE schemaname = %s ORDER BY idx_tup_read DESC LIMIT 10', ('softwarefactoryservice_schema',)); \
	for row in cur.fetchall(): print(f'{row[0]}.{row[1]}.{row[2]}: reads={row[3]}, fetches={row[4]}'); \
	print('\\n=== TAMA√ëO DE √çNDICES ==='); \
	cur.execute('SELECT indexname, pg_size_pretty(pg_relation_size(indexname::regclass)) as size FROM pg_indexes WHERE schemaname = %s ORDER BY pg_relation_size(indexname::regclass) DESC LIMIT 10', ('softwarefactoryservice_schema',)); \
	for row in cur.fetchall(): print(f'{row[0]}: {row[1]}'); \
	conn.close()"

apply-user-story-indexes: ## Aplicar √≠ndices optimizados basados en historias de usuario
	@echo "üöÄ Aplicando √≠ndices optimizados para historias de usuario..."
	$(PYTHON) -m alembic upgrade 004_user_stories_optimized_indexes
	@echo "‚úÖ √çndices de historias de usuario aplicados"

analyze-user-story-performance: ## Analizar rendimiento espec√≠fico de consultas de historias de usuario
	@echo "üìà Analizando rendimiento de consultas de historias de usuario..."
	$(PYTHON) -c "import psycopg2; import os; \
	conn = psycopg2.connect(os.getenv('DATABASE_URL', 'postgresql://softwarefactoryservice_user:softwarefactoryservice_password_placeholder@localhost:5432/sicora_db')); \
	cur = conn.cursor(); \
	print('=== √çNDICES DE USER STORIES ==='); \
	cur.execute(\"SELECT indexname, idx_tup_read, idx_tup_fetch FROM pg_stat_user_indexes WHERE tablename = 'factory_user_stories' AND schemaname = 'softwarefactoryservice_schema' ORDER BY idx_tup_read DESC\"); \
	for row in cur.fetchall(): print(f'{row[0]}: reads={row[1]}, fetches={row[2]}'); \
	print('\\n=== CONSULTAS M√ÅS LENTAS (USER STORIES) ==='); \
	cur.execute(\"SELECT query, mean_time, calls FROM pg_stat_statements WHERE query LIKE '%factory_user_stories%' ORDER BY mean_time DESC LIMIT 5\"); \
	for row in cur.fetchall(): print(f'Query: {row[0][:80]}... | Tiempo medio: {row[1]:.2f}ms | Llamadas: {row[2]}'); \
	conn.close()"

validate-index-usage: ## Validar que los √≠ndices cr√≠ticos est√°n siendo utilizados
	@echo "‚úÖ Validando uso de √≠ndices cr√≠ticos..."
	$(PYTHON) -c "import psycopg2; import os; \
	conn = psycopg2.connect(os.getenv('DATABASE_URL', 'postgresql://softwarefactoryservice_user:softwarefactoryservice_password_placeholder@localhost:5432/sicora_db')); \
	cur = conn.cursor(); \
	critical_indexes = ['idx_factory_user_stories_backlog_management', 'idx_factory_user_stories_personal_tasks', 'idx_factory_projects_instructor_dashboard']; \
	print('=== VALIDACI√ìN DE √çNDICES CR√çTICOS ==='); \
	for idx in critical_indexes: \
	    cur.execute('SELECT idx_tup_read, idx_tup_fetch FROM pg_stat_user_indexes WHERE indexname = %s', (idx,)); \
	    result = cur.fetchone(); \
	    if result: print(f'‚úÖ {idx}: reads={result[0]}, fetches={result[1]}'); \
	    else: print(f'‚ùå {idx}: NO ENCONTRADO'); \
	conn.close()"

vacuum-analyze: ## Ejecutar VACUUM ANALYZE en todas las tablas
	@echo "üßπ Ejecutando VACUUM ANALYZE..."
	$(PYTHON) -c "import psycopg2; import os; \
	conn = psycopg2.connect(os.getenv('DATABASE_URL', 'postgresql://softwarefactoryservice_user:softwarefactoryservice_password_placeholder@localhost:5432/sicora_db')); \
	conn.autocommit = True; \
	cur = conn.cursor(); \
	cur.execute('SET search_path = softwarefactoryservice_schema, public'); \
	tables = ['factory_projects', 'factory_teams', 'factory_team_members', 'factory_sprints', 'factory_user_stories', 'factory_evaluations', 'factory_technologies', 'factory_improvement_plans']; \
	for table in tables: \
		try: \
			cur.execute(f'VACUUM ANALYZE {table}'); \
			print(f'‚úÖ {table} optimizada'); \
		except Exception as e: \
			print(f'‚ö†Ô∏è Error en {table}: {e}'); \
	conn.close()"

# Default target
.DEFAULT_GOAL := help
