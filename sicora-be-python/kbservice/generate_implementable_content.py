#!/usr/bin/env python3
"""
Generador de Contenido Implementable para KBService
Crea contenido espec√≠fico y estructurado listo para implementar como soporte primario
"""

import json
import uuid
from datetime import datetime
from typing import List, Dict, Any


class SupportContentGenerator:
    """Generador de contenido espec√≠fico para soporte primario."""
    
    def __init__(self):
        # Plantillas de contenido por tipo
        self.content_templates = {
            'step_by_step_guide': {
                'structure': [
                    'Objetivo',
                    'Requisitos previos',
                    'Pasos detallados',
                    'Verificaci√≥n',
                    'Soluci√≥n de problemas'
                ]
            },
            'faq_item': {
                'structure': [
                    'Pregunta',
                    'Respuesta corta',
                    'Respuesta detallada',
                    'Enlaces relacionados'
                ]
            },
            'troubleshooting_guide': {
                'structure': [
                    'S√≠ntomas',
                    'Causas posibles',
                    'Soluciones paso a paso',
                    'Prevenci√≥n'
                ]
            }
        }
    
    def generate_essential_content(self) -> Dict[str, List[Dict[str, Any]]]:
        """Generar contenido esencial para soporte primario."""
        
        content = {
            'critical_faqs': self._generate_critical_faqs(),
            'onboarding_guides': self._generate_onboarding_guides(),
            'troubleshooting_guides': self._generate_troubleshooting_guides(),
            'quick_reference_cards': self._generate_quick_reference_cards()
        }
        
        return content
    
    def _generate_critical_faqs(self) -> List[Dict[str, Any]]:
        """Generar FAQs cr√≠ticas para cada m√≥dulo."""
        
        faqs = []
        
        # AttendanceService FAQs
        attendance_faqs = [
            {
                'question': '¬øC√≥mo marco mi asistencia en SICORA?',
                'short_answer': 'Use la opci√≥n "Marcar Asistencia" en la pantalla principal.',
                'detailed_answer': '''
**Pasos para marcar asistencia:**
1. Ingrese al sistema SICORA con sus credenciales
2. En la pantalla principal, seleccione "Marcar Asistencia"
3. Verifique que la ubicaci√≥n detectada sea correcta
4. Confirme el registro con el bot√≥n "Confirmar Asistencia"
5. Espere la confirmaci√≥n visual del sistema

**Nota importante:** La asistencia debe marcarse durante el horario de clase establecido.
                ''',
                'category': 'attendanceservice',
                'target_audience': ['aprendices'],
                'priority': 'critical'
            },
            {
                'question': '¬øQu√© pasa si llego tarde a clase?',
                'short_answer': 'El sistema registra tardanzas autom√°ticamente seg√∫n la hora de llegada.',
                'detailed_answer': '''
**Manejo de tardanzas:**
- **Tardanza menor (1-15 min):** Se registra como tardanza simple
- **Tardanza mayor (16-30 min):** Se registra como tardanza grave
- **Llegada despu√©s de 30 min:** Se considera falta

**C√≥mo justificar una tardanza:**
1. Vaya a "Mi Historial de Asistencia"
2. Seleccione la fecha con tardanza
3. Clic en "Justificar"
4. Adjunte documentos de soporte si es necesario
5. Env√≠e la justificaci√≥n

**Documentos v√°lidos:** Incapacidades m√©dicas, emergencias familiares, problemas de transporte p√∫blico.
                ''',
                'category': 'attendanceservice',
                'target_audience': ['aprendices'],
                'priority': 'high'
            }
        ]
        
        # ScheduleService FAQs
        schedule_faqs = [
            {
                'question': '¬øD√≥nde puedo consultar mi horario de clases?',
                'short_answer': 'En la secci√≥n "Mi Horario" del men√∫ principal.',
                'detailed_answer': '''
**Para consultar su horario:**
1. Acceda al sistema SICORA
2. En el men√∫ principal, seleccione "Mi Horario"
3. Use los filtros para ver horario por:
   - D√≠a espec√≠fico
   - Semana completa
   - Mes completo

**Informaci√≥n disponible:**
- Materia y instructor
- Hora de inicio y fin
- Ambiente asignado
- Tipo de clase (te√≥rica/pr√°ctica)
- Estado (confirmada/pendiente)

**Nota:** Los cambios de horario se reflejan autom√°ticamente en el sistema.
                ''',
                'category': 'scheduleservice',
                'target_audience': ['aprendices', 'instructores'],
                'priority': 'critical'
            },
            {
                'question': '¬øC√≥mo reservo un ambiente de formaci√≥n? (Instructores)',
                'short_answer': 'Use la opci√≥n "Gesti√≥n de Ambientes" en el men√∫ de instructor.',
                'detailed_answer': '''
**Pasos para reservar un ambiente:**
1. Acceda a "Gesti√≥n de Ambientes"
2. Seleccione la fecha deseada en el calendario
3. Verifique disponibilidad por horario
4. Escoja el ambiente que necesite:
   - Aula te√≥rica
   - Laboratorio de sistemas
   - Aula especializada
5. Confirme la reserva

**Restricciones:**
- M√°ximo 2 horas continuas por reserva
- No se puede reservar con menos de 24h de anticipaci√≥n
- Cancelaciones deben hacerse con 2h de anticipaci√≥n

**En caso de problemas:** Contacte a coordinaci√≥n acad√©mica.
                ''',
                'category': 'scheduleservice',
                'target_audience': ['instructores'],
                'priority': 'high'
            }
        ]
        
        # UserService FAQs
        user_faqs = [
            {
                'question': '¬øC√≥mo cambio mi contrase√±a en SICORA?',
                'short_answer': 'Vaya a "Mi Perfil" > "Cambiar Contrase√±a".',
                'detailed_answer': '''
**Pasos para cambiar contrase√±a:**
1. Acceda a su perfil de usuario
2. Seleccione "Configuraci√≥n de Cuenta"
3. Clic en "Cambiar Contrase√±a"
4. Ingrese su contrase√±a actual
5. Escriba la nueva contrase√±a (2 veces)
6. Confirme el cambio

**Requisitos de contrase√±a:**
- M√≠nimo 8 caracteres
- Al menos 1 letra may√∫scula
- Al menos 1 n√∫mero
- Al menos 1 car√°cter especial (@, #, $, etc.)

**Importante:** Despu√©s del cambio, deber√° iniciar sesi√≥n nuevamente en todos sus dispositivos.
                ''',
                'category': 'userservice',
                'target_audience': ['aprendices', 'instructores', 'administrativos'],
                'priority': 'critical'
            },
            {
                'question': 'Olvid√© mi contrase√±a, ¬øqu√© hago?',
                'short_answer': 'Use la opci√≥n "Recuperar Contrase√±a" en la pantalla de login.',
                'detailed_answer': '''
**Proceso de recuperaci√≥n:**
1. En la pantalla de login, clic en "¬øOlvid√≥ su contrase√±a?"
2. Ingrese su n√∫mero de documento
3. Verifique su correo electr√≥nico registrado
4. Clic en el enlace de recuperaci√≥n recibido
5. Cree una nueva contrase√±a

**Si no recibe el correo:**
- Verifique la carpeta de spam
- Espere hasta 10 minutos
- Intente nuevamente

**Si persiste el problema:**
- Contacte al administrador del sistema
- Presente su documento de identidad
- Solicite reseteo manual de contrase√±a
                ''',
                'category': 'userservice',
                'target_audience': ['aprendices', 'instructores', 'administrativos'],
                'priority': 'critical'
            }
        ]
        
        # Compilar todas las FAQs
        all_faqs = attendance_faqs + schedule_faqs + user_faqs
        
        # Agregar metadatos
        for i, faq in enumerate(all_faqs):
            faq.update({
                'id': str(uuid.uuid4())[:12],
                'type': 'faq',
                'status': 'published',
                'created_at': datetime.now().isoformat(),
                'tags': self._generate_tags_for_faq(faq),
                'search_keywords': self._extract_search_keywords(faq)
            })
        
        return all_faqs
    
    def _generate_onboarding_guides(self) -> List[Dict[str, Any]]:
        """Generar gu√≠as de onboarding para nuevos usuarios."""
        
        guides = [
            {
                'id': str(uuid.uuid4())[:12],
                'title': 'Gu√≠a de Primer Ingreso para Aprendices',
                'type': 'onboarding_guide',
                'target_audience': ['aprendices'],
                'content': '''
# Bienvenido a SICORA - Gu√≠a de Primer Ingreso

## üéØ Objetivo
Esta gu√≠a lo ayudar√° a realizar su primer ingreso al sistema SICORA y conocer las funciones b√°sicas.

## üìã Requisitos Previos
- Tener sus credenciales de acceso (proporcionadas por coordinaci√≥n acad√©mica)
- Dispositivo con conexi√≥n a internet
- Navegador web actualizado

## üîë Paso 1: Primer Ingreso
1. **Acceda al sistema:** Vaya a la URL proporcionada por su coordinaci√≥n
2. **Ingrese credenciales:**
   - Usuario: Su n√∫mero de documento
   - Contrase√±a: Contrase√±a temporal proporcionada
3. **Cambio obligatorio de contrase√±a:**
   - El sistema le solicitar√° crear una nueva contrase√±a
   - Siga los requisitos de seguridad mostrados
4. **Complete su perfil:**
   - Verifique sus datos personales
   - Agregue foto de perfil (opcional)
   - Confirme su informaci√≥n de contacto

## üì± Paso 2: Conocer la Interfaz Principal
**Elementos principales:**
- **Men√∫ superior:** Navegaci√≥n principal
- **Dashboard:** Resumen de su actividad acad√©mica
- **Notificaciones:** Alertas importantes
- **Mi Perfil:** Configuraci√≥n personal

## ‚úÖ Paso 3: Funciones Esenciales
### Marcar Asistencia
- Ubicaci√≥n: Bot√≥n principal en el dashboard
- Cu√°ndo usar: Al inicio de cada clase
- Qu√© verificar: Ubicaci√≥n y horario correctos

### Consultar Horario
- Ubicaci√≥n: Men√∫ "Mi Horario"
- Informaci√≥n disponible: Materias, horarios, ambientes
- Filtros: Por d√≠a, semana o mes

### Ver Calificaciones
- Ubicaci√≥n: Men√∫ "Mis Evaluaciones"
- Informaci√≥n: Notas por materia, promedio general
- Exportar: Opci√≥n de descarga en PDF

## ‚úì Verificaci√≥n
Despu√©s de completar estos pasos, usted deber√≠a poder:
- [ ] Ingresar al sistema sin problemas
- [ ] Marcar asistencia correctamente
- [ ] Consultar su horario de clases
- [ ] Ver sus calificaciones actuales
- [ ] Recibir notificaciones del sistema

## üö® Soluci√≥n de Problemas Comunes
**No puedo ingresar:** Verifique credenciales y contacte a coordinaci√≥n
**No aparece mi horario:** Espere 24h despu√©s de matr√≠cula o contacte coordinaci√≥n
**Error al marcar asistencia:** Verifique conexi√≥n a internet y ubicaci√≥n GPS

## üìû Soporte
- **Soporte t√©cnico:** Opci√≥n "Ayuda" en el men√∫
- **Coordinaci√≥n acad√©mica:** Horarios de atenci√≥n presencial
- **Chat de ayuda:** Disponible de 7:00 AM a 6:00 PM
                ''',
                'priority': 'critical',
                'estimated_completion_time': '15 minutos',
                'created_at': datetime.now().isoformat()
            },
            {
                'id': str(uuid.uuid4())[:12],
                'title': 'Gu√≠a de Inicio para Instructores',
                'type': 'onboarding_guide',
                'target_audience': ['instructores'],
                'content': '''
# Gu√≠a de Inicio para Instructores - SICORA

## üéØ Objetivo
Familiarizar a los instructores con las herramientas de gesti√≥n acad√©mica en SICORA.

## üîë Configuraci√≥n Inicial
### Primer Acceso
1. Use sus credenciales institucionales
2. Complete la verificaci√≥n de perfil
3. Configure sus preferencias de notificaci√≥n
4. Revise los grupos de formaci√≥n asignados

### Configuraci√≥n del Espacio de Trabajo
- **Dashboard personalizable:** Organice widgets seg√∫n su preferencia
- **Calendario integrado:** Sincronice con horarios institucionales
- **Notificaciones:** Configure alertas para eventos importantes

## üìö Gesti√≥n de Clases
### Toma de Asistencia
1. Acceda al m√≥dulo "Gesti√≥n de Grupos"
2. Seleccione el grupo de formaci√≥n
3. Escoja la fecha y horario de clase
4. Marque presente/ausente para cada aprendiz
5. Agregue observaciones si es necesario

### Programaci√≥n de Actividades
- **Crear actividades:** Defina objetivos y recursos necesarios
- **Asignar ambientes:** Reserve espacios seg√∫n tipo de actividad
- **Configurar evaluaciones:** Establezca criterios y fechas

## üìä Evaluaci√≥n y Seguimiento
### Sistema de Evaluaciones
- **Criterios predefinidos:** Use las r√∫bricas institucionales
- **Evaluaci√≥n continua:** Registre progreso de forma regular
- **Reportes autom√°ticos:** Genere informes de desempe√±o

### Comunicaci√≥n con Aprendices
- **Mensajes del sistema:** Env√≠e comunicaciones oficiales
- **Feedback individual:** Proporcione retroalimentaci√≥n personalizada
- **Notificaciones grupales:** Informe cambios de horario o actividades

## ‚öôÔ∏è Herramientas Avanzadas
### Gesti√≥n de Ambientes
- Verificar disponibilidad en tiempo real
- Reservar espacios especializados
- Reportar problemas t√©cnicos

### Reportes y Analytics
- Generar reportes de asistencia
- An√°lisis de desempe√±o grupal
- Exportar datos para an√°lisis externo

## ‚úì Lista de Verificaci√≥n Semanal
- [ ] Revisar asistencia de todos los grupos
- [ ] Actualizar calificaciones pendientes
- [ ] Verificar reservas de ambientes para la pr√≥xima semana
- [ ] Responder mensajes de aprendices
- [ ] Completar observaciones en el sistema

## üìû Soporte Pedag√≥gico
- **Mesa de ayuda t√©cnica:** Disponible 24/7
- **Coordinaci√≥n acad√©mica:** Soporte pedag√≥gico
- **Comunidad de instructores:** Foro interno de mejores pr√°cticas
                ''',
                'priority': 'high',
                'estimated_completion_time': '30 minutos',
                'created_at': datetime.now().isoformat()
            }
        ]
        
        return guides
    
    def _generate_troubleshooting_guides(self) -> List[Dict[str, Any]]:
        """Generar gu√≠as de soluci√≥n de problemas."""
        
        guides = [
            {
                'id': str(uuid.uuid4())[:12],
                'title': 'Problemas de Acceso al Sistema',
                'type': 'troubleshooting_guide',
                'category': 'authentication',
                'symptoms': [
                    'No puedo iniciar sesi√≥n',
                    'El sistema dice que mis credenciales son incorrectas',
                    'La p√°gina no carga despu√©s del login'
                ],
                'solutions': '''
## üîç Diagn√≥stico Paso a Paso

### S√≠ntoma: No puedo iniciar sesi√≥n
**Causas posibles:**
- Credenciales incorrectas
- Cuenta bloqueada temporalmente
- Problemas de conectividad
- Cach√© del navegador

**Soluciones:**
1. **Verificar credenciales:**
   - Usuario: N√∫mero de documento sin puntos ni espacios
   - Contrase√±a: Distingue may√∫sculas de min√∫sculas
   
2. **Limpiar cach√© del navegador:**
   - Chrome: Ctrl+Shift+Delete
   - Firefox: Ctrl+Shift+Delete
   - Safari: Cmd+Option+E
   
3. **Probar navegador privado/inc√≥gnito:**
   - Esto ayuda a identificar problemas de cach√©
   
4. **Verificar conexi√≥n a internet:**
   - Pruebe con otros sitios web
   - Verifique si est√° en la red institucional

### S√≠ntoma: Cuenta bloqueada
**Causas:**
- M√∫ltiples intentos fallidos de login
- Violaci√≥n de pol√≠ticas de seguridad

**Soluciones:**
1. Espere 15 minutos antes de intentar nuevamente
2. Use la opci√≥n "Recuperar contrase√±a"
3. Contacte al administrador del sistema

### S√≠ntoma: Sistema lento o no responde
**Soluciones inmediatas:**
1. Refrescar la p√°gina (F5)
2. Cerrar otras pesta√±as del navegador
3. Reiniciar el navegador
4. Verificar hora del sistema (debe estar sincronizada)

## üö® Cu√°ndo Contactar Soporte
- Despu√©s de intentar todas las soluciones b√°sicas
- Si el problema persiste por m√°s de 30 minutos
- Si afecta a m√∫ltiples usuarios
- Si involucra informaci√≥n acad√©mica cr√≠tica
                ''',
                'priority': 'critical',
                'target_audience': ['aprendices', 'instructores', 'administrativos'],
                'created_at': datetime.now().isoformat()
            }
        ]
        
        return guides
    
    def _generate_quick_reference_cards(self) -> List[Dict[str, Any]]:
        """Generar tarjetas de referencia r√°pida."""
        
        cards = [
            {
                'id': str(uuid.uuid4())[:12],
                'title': 'Referencia R√°pida - Asistencia',
                'type': 'quick_reference',
                'category': 'attendanceservice',
                'content': '''
# ‚ö° Referencia R√°pida - Asistencia

## üïê Horarios de Marcaci√≥n
- **Llegada puntual:** Dentro de los primeros 15 min
- **Tardanza simple:** 16-30 min despu√©s del inicio
- **Tardanza grave:** 31-45 min despu√©s del inicio
- **Falta:** M√°s de 45 min o no marcar asistencia

## üìç C√≥mo Marcar
1. Dashboard ‚Üí "Marcar Asistencia"
2. Verificar ubicaci√≥n GPS
3. Confirmar horario mostrado
4. Clic en "Confirmar"

## üìä Consultar Historial
- **Ruta:** Men√∫ ‚Üí "Mi Asistencia"
- **Filtros:** Por fecha, materia, tipo
- **Exportar:** Opci√≥n PDF disponible

## ‚ö†Ô∏è Justificar Faltas
- **Plazo:** M√°ximo 3 d√≠as h√°biles
- **Documentos:** Incapacidad m√©dica, calamidad familiar
- **Proceso:** Historial ‚Üí Seleccionar fecha ‚Üí "Justificar"

## üìû Contactos
- **Coordinaci√≥n:** Ext. 101
- **Soporte t√©cnico:** Opci√≥n "Ayuda" en el sistema
                ''',
                'target_audience': ['aprendices'],
                'priority': 'high',
                'created_at': datetime.now().isoformat()
            },
            {
                'id': str(uuid.uuid4())[:12],
                'title': 'Referencia R√°pida - Horarios',
                'type': 'quick_reference',
                'category': 'scheduleservice',
                'content': '''
# ‚ö° Referencia R√°pida - Horarios

## üìÖ Consultar Mi Horario
- **Ruta:** Men√∫ ‚Üí "Mi Horario"
- **Vistas:** D√≠a / Semana / Mes
- **Informaci√≥n:** Materia, instructor, ambiente, hora

## üè¢ C√≥digo de Ambientes
- **A101-A120:** Aulas te√≥ricas
- **L201-L210:** Laboratorios de sistemas
- **T301-T305:** Talleres especializados
- **S401-S403:** Salas de reuniones

## üîÑ Cambios de Horario
- **Notificaci√≥n:** Autom√°tica por el sistema
- **Confirmaci√≥n:** Requerida en 24h
- **Consultas:** Coordinaci√≥n acad√©mica

## üìç Ubicaci√≥n de Ambientes
- **Edificio A:** Aulas te√≥ricas (Piso 1-2)
- **Edificio L:** Laboratorios (Piso 2-3)
- **Edificio T:** Talleres (Piso 1)
- **Edificio S:** Salas especiales (Piso 4)

## üîî Recordatorios
- **15 min antes:** Notificaci√≥n autom√°tica
- **Cambios:** Alerta inmediata
- **Cancelaciones:** Aviso con 2h de anticipaci√≥n
                ''',
                'target_audience': ['aprendices', 'instructores'],
                'priority': 'high',
                'created_at': datetime.now().isoformat()
            }
        ]
        
        return cards
    
    def _generate_tags_for_faq(self, faq: Dict[str, Any]) -> List[str]:
        """Generar tags para una FAQ."""
        
        tags = set()
        
        # Tags de categor√≠a
        if faq.get('category'):
            tags.add(faq['category'])
        
        # Tags de audiencia
        for audience in faq.get('target_audience', []):
            tags.add(audience)
        
        # Tags de contenido
        content = (faq.get('question', '') + ' ' + faq.get('short_answer', '')).lower()
        
        keyword_tags = {
            'login': ['acceso', 'ingreso', 'sesi√≥n'],
            'password': ['contrase√±a', 'clave'],
            'attendance': ['asistencia', 'tardanza', 'falta'],
            'schedule': ['horario', 'clase', 'ambiente'],
            'grades': ['calificaci√≥n', 'nota', 'evaluaci√≥n'],
            'profile': ['perfil', 'datos', 'informaci√≥n']
        }
        
        for tag, keywords in keyword_tags.items():
            if any(keyword in content for keyword in keywords):
                tags.add(tag)
        
        return list(tags)[:8]  # Limitar a 8 tags
    
    def _extract_search_keywords(self, faq: Dict[str, Any]) -> List[str]:
        """Extraer palabras clave para b√∫squeda."""
        
        import re
        
        text = (faq.get('question', '') + ' ' + faq.get('short_answer', '')).lower()
        
        # Limpiar y extraer palabras clave
        words = re.findall(r'\b\w{4,}\b', text)  # Palabras de 4+ caracteres
        
        # Filtrar palabras comunes
        stop_words = {'para', 'como', 'donde', 'cuando', 'porque', 'sistema', 'puedo', 'debo'}
        keywords = [word for word in words if word not in stop_words]
        
        # Tomar las m√°s relevantes
        return list(set(keywords))[:10]


def main():
    """Funci√≥n principal."""
    
    print("üöÄ Generador de Contenido Implementable para KBService")
    print("=" * 60)
    
    generator = SupportContentGenerator()
    
    # Generar contenido esencial
    content = generator.generate_essential_content()
    
    # Guardar en archivos separados por tipo
    for content_type, items in content.items():
        filename = f"implementable_{content_type}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(items, f, ensure_ascii=False, indent=2)
        
        print(f"üìÑ {content_type.replace('_', ' ').title()}: {len(items)} elementos ‚Üí {filename}")
    
    # Crear resumen de implementaci√≥n
    implementation_summary = {
        'total_items': sum(len(items) for items in content.values()),
        'by_type': {k: len(v) for k, v in content.items()},
        'priority_distribution': {
            'critical': sum(1 for items in content.values() for item in items if item.get('priority') == 'critical'),
            'high': sum(1 for items in content.values() for item in items if item.get('priority') == 'high'),
            'medium': sum(1 for items in content.values() for item in items if item.get('priority') == 'medium')
        },
        'target_audience_coverage': {},
        'module_coverage': {},
        'implementation_order': [
            'critical_faqs (implementar primero)',
            'onboarding_guides (segunda prioridad)',
            'quick_reference_cards (tercera prioridad)',
            'troubleshooting_guides (cuarta prioridad)'
        ],
        'estimated_implementation_time': '2-3 d√≠as para contenido b√°sico',
        'recommended_testing_time': '1 semana con usuarios reales'
    }
    
    # Calcular cobertura de audiencia
    all_audiences = set()
    for items in content.values():
        for item in items:
            audiences = item.get('target_audience', [])
            all_audiences.update(audiences)
    
    for audience in all_audiences:
        count = sum(1 for items in content.values() for item in items 
                   if audience in item.get('target_audience', []))
        implementation_summary['target_audience_coverage'][audience] = count
    
    # Guardar resumen
    with open('implementation_summary.json', 'w', encoding='utf-8') as f:
        json.dump(implementation_summary, f, ensure_ascii=False, indent=2)
    
    # Mostrar estad√≠sticas
    print(f"\nüìä RESUMEN DE CONTENIDO GENERADO:")
    print(f"Total de elementos: {implementation_summary['total_items']}")
    
    print(f"\nüéØ Por tipo de contenido:")
    for content_type, count in implementation_summary['by_type'].items():
        print(f"  {content_type.replace('_', ' ').title()}: {count} elementos")
    
    print(f"\nüî• Por prioridad:")
    for priority, count in implementation_summary['priority_distribution'].items():
        print(f"  {priority.title()}: {count} elementos")
    
    print(f"\nüë• Cobertura por audiencia:")
    for audience, count in implementation_summary['target_audience_coverage'].items():
        print(f"  {audience.title()}: {count} elementos")
    
    print(f"\nüìã ORDEN DE IMPLEMENTACI√ìN RECOMENDADO:")
    for i, step in enumerate(implementation_summary['implementation_order'], 1):
        print(f"  {i}. {step}")
    
    print(f"\n‚è±Ô∏è ESTIMACIONES:")
    print(f"  Tiempo de implementaci√≥n: {implementation_summary['estimated_implementation_time']}")
    print(f"  Tiempo de testing: {implementation_summary['recommended_testing_time']}")
    
    print(f"\nüíæ Archivos generados:")
    for content_type in content.keys():
        print(f"  üìÑ implementable_{content_type}.json")
    print(f"  üìä implementation_summary.json")
    
    print(f"\n‚úÖ Contenido listo para implementar en KBService!")


if __name__ == "__main__":
    main()
