#!/bin/bash
# Script de Inicialización Git para SICORA
# Configura el repositorio con mejores prácticas

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Funciones
log() {
    echo -e "${BLUE}[INIT-GIT]${NC} $1"
}

error() {
    echo -e "${RED}❌ $1${NC}"
}

success() {
    echo -e "${GREEN}✅ $1${NC}"
}

warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

echo -e "${BLUE}🚀 Inicializando Git para SICORA${NC}"
echo "================================="

# Verificar si ya estamos en un repositorio Git
if [ -d ".git" ]; then
    log "Repository already initialized"
else
    log "Initializing Git repository..."
    git init
    success "Git repository initialized"
fi

# Configurar usuario y email para el proyecto
log "Configuring Git user settings..."
git config user.name "SICORA Team"
git config user.email "desarrollo@sicora.onevision.edu.co"
success "Git user settings configured"

# Configurar Git para el proyecto
log "Configuring Git settings..."
git config core.autocrlf false
git config core.safecrlf false
git config pull.rebase true
git config push.default simple
git config init.defaultBranch main

# Configurar aliases útiles
git config alias.st status
git config alias.co checkout
git config alias.br branch
git config alias.ci commit
git config alias.lg "log --oneline --graph --decorate --all"
git config alias.amend "commit --amend --no-edit"
git config alias.unstage "reset HEAD --"
git config alias.last "log -1 HEAD"
git config alias.visual "!gitk"

success "Git aliases configured"

# Configurar hooks globales
log "Configuring Git hooks..."
git config core.hooksPath .githooks

# Hacer los hooks ejecutables
if [ -d ".githooks" ]; then
    chmod +x .githooks/pre-commit
    chmod +x .githooks/commit-msg
    chmod +x .githooks/post-commit
    success "Git hooks configured and made executable"
else
    warning "No .githooks directory found"
fi

# Crear .gitignore si no existe
if [ ! -f ".gitignore" ]; then
    log "Creating .gitignore file..."
    cat > .gitignore << 'EOF'
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node_modules
node_modules/
*/node_modules/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Build directories
dist/
build/
*.tgz
*.tar.gz

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
ENV/
env.bak/
venv.bak/

# Go
# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary, built with `go test -c`
*.test

# Output of the go coverage tool
*.out

# Dependency directories (Go)
vendor/

# Go workspace file
go.work

# Docker
.dockerignore
Dockerfile.dev
docker-compose.override.yml

# Temporary files
*.tmp
*.temp
.cache/
.parcel-cache/

# Database
*.db
*.sqlite
*.sqlite3

# Backup files
*.backup
*.bak
*.old
*~

# SICORA specific
sicora-data/
backup/
*.sicora.tmp
EOF
    success ".gitignore created"
else
    log ".gitignore already exists"
fi

# Verificar configuración
log "Verifying Git configuration..."
echo "  User: $(git config user.name) <$(git config user.email)>"
echo "  Default branch: $(git config init.defaultBranch)"
echo "  Pull strategy: $(git config pull.rebase)"
echo "  Push strategy: $(git config push.default)"
echo "  Hooks path: $(git config core.hooksPath)"

# Mostrar aliases configurados
echo ""
log "Configured aliases:"
git config --get-regexp alias | sed 's/^alias\./  /'

# Crear primer commit si no hay commits
if ! git rev-parse --verify HEAD >/dev/null 2>&1; then
    log "Creating initial commit..."
    git add . -- ':!sicora-docs/*'
    git commit -m "chore: initial setup of SICORA project

- Configure Git repository with best practices
- Add comprehensive .gitignore
- Configure Git hooks for code quality
- Set up aliases and configurations
- Initialize project structure

Co-authored-by: SICORA Development Team <desarrollo@sicora.onevision.edu.co>"
    success "Initial commit created"
else
    log "Repository already has commits"
fi

# Mostrar estado final
echo ""
log "📊 Repository Status:"
git status --short

echo ""
success "Git initialization completed for SICORA! 🎉"
echo ""
echo "Next steps:"
echo "1. Review the configuration: git config --list"
echo "2. Make your first commit: git add . && git commit -m 'feat: your feature'"
echo "3. Use the universal autocommit: ./scripts/universal-autocommit.sh"
echo "4. Push to remote: git push origin main"
