version: '3.8'

services:
  attendanceservice:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: attendanceservice
    ports:
      - '8003:8003'
    environment:
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8003
      - SERVER_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=attendanceservice_user
      - DB_PASSWORD=attendanceservice_password_secure_2024
      - DB_NAME=sicora_multistack
      - DB_SCHEMA=attendanceservice
      - DB_SSL_MODE=disable
      - JWT_SECRET=attendance_service_jwt_secret_key_very_secure_2024
      - JWT_EXPIRY_HOUR=24
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:8003/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - attendanceservice-network

  postgres:
    image: postgres:15-alpine
    container_name: attendanceservice-postgres
    environment:
      - POSTGRES_DB=sicora_multistack
      - POSTGRES_USER=attendanceservice_user
      - POSTGRES_PASSWORD=attendanceservice_password_secure_2024
    ports:
      - '5433:5432' # Puerto diferente para evitar conflictos
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U attendanceservice_user -d sicora_multistack',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - attendanceservice-network

volumes:
  postgres_data:
    driver: local

networks:
  attendanceservice-network:
    driver: bridge
